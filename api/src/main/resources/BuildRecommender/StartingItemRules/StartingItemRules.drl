package BuildRecommender.StartingItemRules;
dialect  "mvel"

import com.example.demo.Model.Item
import com.example.demo.Model.DamageType
import com.example.demo.Model.Champion
import com.example.demo.Model.Enums.ChampionClass
import com.example.demo.Model.Enums.Lane
import com.example.demo.Model.Enums.ItemSlot
import com.example.demo.Model.ItemRecommendSession


rule "Recommend starting item based on early game playstyle prefference, FARMING / SAFE PLAY"
agenda-group "defensive"
no-loop
    when
        $item: Item(itemSlot == ItemSlot.STARTING, isDefensive()) //dshield
        $session: ItemRecommendSession($fullBuild: fullBuild, isStartingItemGiven() == false)
    then
        modify($session){ setStartingItemGiven(true)}
        modify($session){ fullBuild.setStartingItem($item)}
end


rule "Recommend starting item based on early game playstyle prefference, OFFENSIVE / KILLING / ROAMING, for ap champions"
agenda-group "offensive"
no-loop
    when
        $item: Item($name: name, itemSlot == ItemSlot.STARTING, offensive == true, forAP == true)
        $session: ItemRecommendSession($fullBuild: fullBuild, pickedChampion.getMagicDamage() > 50, isStartingItemGiven() == false)

    then
        modify($session){ setStartingItemGiven(true)}
        modify($session){ fullBuild.setStartingItem($item)}

end


rule "Recommend starting item based on early game playstyle prefference, OFFENSIVE / KILLING / ROAMING, for ad champions"
agenda-group "offensive"
no-loop
    when
        $item: Item($name: name, itemSlot == ItemSlot.STARTING, isOffensive() == true, isForAD() == true)
        $session: ItemRecommendSession($fullBuild: fullBuild, pickedChampion.getPhysicalDamage() > 50, startingItemGiven == false)
    then
        modify($session){ setStartingItemGiven(true)}
        modify($session){ fullBuild.setStartingItem($item)}

end


rule "Recommend starting item based on early game playstyle prefference, OFFENSIVE / TRADING / HEALING, for all champions"
agenda-group "sustain"
no-loop
    when
        $item: Item($name: name == "Corrupting Potion", itemSlot == ItemSlot.STARTING)
        $session: ItemRecommendSession($fullBuild: fullBuild, startingItemGiven == false)
    then
        modify($session){ setStartingItemGiven(true)}
        modify($session){ fullBuild.setStartingItem($item)}

end

salience 1
rule "Recommend starting item based on early game for supports that are MAGES AS WELL"
agenda-group "support"
no-loop
    when
        $item: Item(itemSlot == ItemSlot.STARTING, $name: name == "Spellthief's Edge")
        $session: ItemRecommendSession($fullBuild: fullBuild, $pickedChampion: pickedChampion, startingItemGiven == false)
        $checkingClass: Champion(damageType.getMagicDamage() > 50) from $pickedChampion
    then
        modify($session){ fullBuild.setStartingItem($item)}
        modify($session){ setStartingItemGiven(true)}

end

salience 2
rule "Recommend starting item based on early game for supports that are TANKS"
agenda-group "support"
no-loop
    when
        $item: Item(itemSlot == ItemSlot.STARTING, name == "Steel Shoulderguards")
        $session: ItemRecommendSession($fullBuild: fullBuild, $pickedChampion: pickedChampion, startingItemGiven == false)
        $checkingClass: Champion(primaryClass == ChampionClass.TANK || secondaryClass == ChampionClass.TANK) from $pickedChampion
    then
        modify($session){ setStartingItemGiven(true)}
        modify($session){ fullBuild.setStartingItem($item)}
end

salience 3
rule "Recommend starting item based on early game for all other supports"
agenda-group "support"
no-loop
    when
        $item: Item(itemSlot == ItemSlot.STARTING, name == "Spectral Sickle")
        $session: ItemRecommendSession($fullBuild: fullBuild, $pickedChampion: pickedChampion, startingItemGiven == false)
        $checkingClass: Champion(damageType.getPhysicalDamage() > 50) from $pickedChampion
    then
        modify($session){ setStartingItemGiven(true)}
        modify($session){ fullBuild.setStartingItem($item)}
end