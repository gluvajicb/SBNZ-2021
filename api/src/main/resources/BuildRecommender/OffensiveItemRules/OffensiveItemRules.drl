package BuildRecommender.OffensiveItemRules;
dialect  "mvel"

import com.example.demo.Model.Item
import com.example.demo.Model.Champion
import com.example.demo.Model.Enums.ItemSlot
import com.example.demo.Model.ItemRecommendSession
import com.example.demo.Model.Enums.ItemSlot
import com.example.demo.Model.Enums.Lane


rule "Recomending offensive item that is good for picked champion's class , for AD champions"
no-loop
     when
            $item: Item(itemSlot == ItemSlot.OFFENSIVE, $forClass: forClass, isForAD()) // dobar item za klasu i za AD dmg type champione
            $session: ItemRecommendSession($fullBuild: fullBuild, $enemyChampion: enemyChampion, $pickedChampion: pickedChampion, offensiveItemGiven == false)
            Champion(damageType.getPhysicalDamage() > 50, $championClass: primaryClass == $forClass) from $pickedChampion
        then
            modify($session){ fullBuild.setOffensiveItem($item)}
            modify($session){ setOffensiveItemGiven(true)}
end

rule "Recomending offensive item that is good for picked champion's class , for AP champions"
no-loop
     when
            $item: Item(itemSlot == ItemSlot.OFFENSIVE, $forClass: forClass, isForAP()) // dobar item za klasu i za AP dmg type champione
            $session: ItemRecommendSession($fullBuild: fullBuild, $enemyChampion: enemyChampion, $pickedChampion: pickedChampion, offensiveItemGiven == false)
            Champion(damageType.getMagicDamage() > 50, $championClass: primaryClass == $forClass) from $pickedChampion
        then
            modify($session){ fullBuild.setOffensiveItem($item)}
            modify($session){ setOffensiveItemGiven(true)}
end

