package ChampionRecommender.DamageTypeRules;
dialect  "mvel"

import com.example.demo.Model.*;
import com.example.demo.Model.ChampionRecommendSession;
import com.example.demo.Model.Enums.*;
import com.example.demo.Model.DamageType;

/* AD */

rule "Recommend champion based on Damage type, AD between 40 and 60"
agenda-group "physical"
no-loop
    when
        $champion: Champion($name: name, damageTypeChecked == false)
        $session: ChampionRecommendSession($championList: championList)
        $damageType: DamageType(physicalDamage >= 40, physicalDamage < 60) from $champion.damageType
        $answers: ChampionRecommendAnswers(prefDamageType == "PHYSICAL")
    then
        modify($session){ updateScore($champion, 5)}
        modify($champion){ setDamageTypeChecked(true)}
end

rule "Recommend champion based on Damage type, AD between 60 and 80"
agenda-group "physical"
no-loop
    when
        $champion: Champion($name: name, damageTypeChecked == false)
        $session: ChampionRecommendSession($championList: championList)
        $damageType: DamageType(physicalDamage >= 60, physicalDamage < 80) from $champion.damageType
        $answers: ChampionRecommendAnswers(prefDamageType == "PHYSICAL")
    then
        modify($session){ updateScore($champion, 10)}
        modify($champion){ setDamageTypeChecked(true)}
end

rule "Recommend champion based on Damage type, AD over 80"
agenda-group "physical"
no-loop
    when
        $champion: Champion($name: name, damageTypeChecked == false)
        $session: ChampionRecommendSession($championList: championList)
        $damageType: DamageType(physicalDamage >= 80) from $champion.damageType
        $answers: ChampionRecommendAnswers(prefDamageType == "PHYSICAL")
    then
        modify($session){ updateScore($champion, 20)}
        modify($champion){ setDamageTypeChecked(true)}
end

/* AP */

rule "Recommend champion based on Damage type, AP between 40 and 60"
agenda-group "magic"
no-loop
    when
        $champion: Champion($name: name, damageTypeChecked == false)
        $session: ChampionRecommendSession($championList: championList)
        $damageType: DamageType(magicDamage >= 40 ,magicDamage < 60) from $champion.damageType
        $answers: ChampionRecommendAnswers(prefDamageType == "MAGIC")
    then
        modify($session){ updateScore($champion, 5)}
        modify($champion){ setDamageTypeChecked(true)}
end

rule "Recommend champion based on Damage type, AP between 60 and 80"
agenda-group "magic"
no-loop
    when
        $champion: Champion($name: name, damageTypeChecked == false)
        $session: ChampionRecommendSession($championList: championList)
        $damageType: DamageType(magicDamage >= 60, magicDamage < 80) from $champion.damageType
        $answers: ChampionRecommendAnswers(prefDamageType == "MAGIC")
    then
        modify($session){ updateScore($champion, 10)}
        modify($champion){ setDamageTypeChecked(true)}
end

rule "Recommend champion based on Damage type, AP over 80"
agenda-group "magic"
no-loop
    when

        $champion: Champion($name: name, damageTypeChecked == false)
        $session: ChampionRecommendSession($championList: championList)
        $damageType: DamageType(magicDamage >= 80) from $champion.damageType
                $answers: ChampionRecommendAnswers(prefDamageType == "MAGIC")

    then
        System.out.println($champion.name + "20 poena ");
        modify($session){ updateScore($champion, 20)}
        modify($champion){ setDamageTypeChecked(true)}
end