package ChampionRecommender.RangeRules;
dialect  "mvel"

import com.example.demo.Model.*;
import com.example.demo.Model.ChampionRecommendSession;
import com.example.demo.Model.Enums.*;

rule "Recommend champion based on RANGE, MELEE"
agenda-group "melee"
no-loop
    when
        $champion: Champion($name: name, attackRange == Range.MELEE, rangeChecked == false)
        $session: ChampionRecommendSession($championList: championList)
        $answers: ChampionRecommendAnswers(prefAttackRange == Range.MELEE)
    then
        modify($session){ updateScore($champion, 15)}
        modify($champion){ setRangeChecked(true)}
end

rule "Recommend champion based on RANGE, RANGED"
agenda-group "ranged"
no-loop
    when
        $champion: Champion($name: name, attackRange == Range.RANGED, rangeChecked == false)
        $session: ChampionRecommendSession($championList: championList)
        $answers: ChampionRecommendAnswers(prefAttackRange == Range.RANGED)

    then
        modify($session){ updateScore($champion, 15)}
        modify($champion){ setRangeChecked(true)}
end

rule "Recommend champion based on RANGE, MIDRANGE"
agenda-group "midrange"
no-loop
    when
        $champion: Champion($name: name, attackRange == Range.MIDRANGE, rangeChecked == false)
        $session: ChampionRecommendSession($championList: championList)
         $answers: ChampionRecommendAnswers(prefAttackRange == Range.MIDRANGE)
    then
        modify($session){ updateScore($champion, 15)}
        modify($champion){ setRangeChecked(true)}
end
